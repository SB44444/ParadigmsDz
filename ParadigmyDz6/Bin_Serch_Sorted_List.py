from random import randint

def bin_serch(arr:[int], x: int): # Ф-ция бинарного поиска индекса эл-та
    # assert arr [int]
    arr = declarate_sort(arr)     # "Сортируем случайный или заданный несортированный список
    print("Cортированный список", arr)

    n_el = len(arr) - 1  # К-во индексов в списке
    start = 0            # Стартовый индекс для определения интервала индексов в поиске
    
    while n_el >= start and n_el >= 0:      # Условие выхода из цикла: индекс в поиске не должен выйти за границы массива
        mid = ((n_el - start) // 2) + start # Делим количество индексов в списке поиска пополам от начала интервала
        
        if arr[mid] == x:     # Если нашли число - выводим индекс
            print('index числа ', x, 'в массиве: ', mid)          
            return mid # Возвращаем index X 
            
        if x > arr[mid]:    # Если  Х больше среднего эл-та, идём вверх
            start = mid + 1 # Новый start +1, т.к. середину уже проверили                 
            
        if x < arr[mid]:    # Если  Х меньше среднего эл-та, идём вниз
            n_el = mid - 1  # Новый n_el -1, т.к. середину уже проверили 
    print("Числа", x, "нет в списке")
    return None             # Если не нашли Х выводим сообщение и возвращаем None

def declarate_sort(arr: [int]):   #  Объявляем ф-цию  сортировки список
    return (sorted(arr)) # Применяем метод sorted

def main():              # Ф-ция запуска
    print("Введите искокмое число X")
    x = input()          # Искокмое число
    try:
        x = int(x)
    except:
        print(f"Ошибка ввода. {x} - целое число")
        raise TypeError('Ошибка типа данных')
    # assert type(x) is int
    
    arr = [randint(0, 10) for _ in range(10)] # "Генерируем случайный несортированный список целых чисел"
    #arr = [0, 1, '2', 4, 6, 8, 10, 12, 14, 16, 18, 20]
    #arr = [0, 1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]

    assert all(isinstance(j, int) for j in arr), 'Ошибка ввода,  ожидаеися список целых чисел тип данных int'
    False   
    print("Несортированный список", arr)
    bin_serch(arr, x)

if __name__ == "__main__":
    main()

